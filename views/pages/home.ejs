<html lang="en">
	<head>
		<% include ../partials/ldOut %>
	</head>
	<body class="slds">
		<header>
		</header>
		<main>
			<div id="renderLtngComp"/>
		</main>
		<footer>
		</footer>
		<script> 
			var SS = SS || { };
			SS.LightningActions = (function() {
				"use strict";
				function onWinLoad() {
					var vars = getUrlVars();
					if(vars["action"]=="oauth"){
						alert("OAuth Successful");
						window.open(window.location.href, '_self', '');
							window.close();
					}
				}
				
				function getUrlVars(){
				    var vars = [], hash;
				    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
				    for(var i = 0; i < hashes.length; i++)
				    {
					hash = hashes[i].split('=');
					vars.push(hash[0]);
					vars[hash[0]] = hash[1];
				    }
				    return vars;
				}
				
				function LDLTCMPCreate() {
					var accessToken="<%= accesstoken %>";
					var sfdcurl = "<%= sfdcurl %>";
					var orgid = "<%= orgid %>";
					var id = getUrlVars()["renId"];
					var sessionIdleTime = "<%= idletime %>";
					console.log(sfdcurl);
					console.log(accessToken);
					console.log('orgId= '+orgid);
					console.log('sessionIdleTime : '+sessionIdleTime);
				    try {
						$Lightning.use("<%= namespace %>LDLT", function(cmp){
							console.log('before calling load component');
							LDT_loadComponent('onload', accessToken);
						}, sfdcurl, accessToken);
						$(document).ready(function () {
							var idleTime = 0;
							var sessionTime = 0;
						    //Increment the idle time counter every minute.
						    var idleInterval = setInterval(timerIncrement, 60000); // 1 minute
						
						    //Zero the idle timer on mouse movement.
						    $(this).keypress(function (e) {
						        idleTime = 0;
						    });
						    $(this).mousedown(function (e) {
						        console.log('mousedown : '+idleTime);
						        idleTime = 0;
						    });
	
							function timerIncrement() {
							    idleTime = idleTime + 1;
							    if (idleTime >= sessionIdleTime && sessionTime == 0) { // 20 minutes
							        sessionTime = sessionIdleTime;
							        //alert('You are idle for more than '+idletime+' minutes');
							        //window.open('/accesstoken?orgid='+orgid+'&renId='+id, '_self', '');
							        var dynamicDialog = $('<div id="conformBox">'+
							        '<span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;">'+
							        '</span>For your security, your session will be refresh, due to '+sessionIdleTime+' minutes of Idle time. <br/> Do you want to refresh the Session? </div>');
							        dynamicDialog.dialog({
							                title : "Session Expiration Warning",
							                closeOnEscape: false,
							                modal : true,
							                resizable: false,
							                height: "auto",
							                position: ['center',80],
							                width: 700,
							        
							                buttons : 
					                        [{
					                                text : "Refresh Session",
					                                click : function() {
					                                        window.open('/accesstoken?orgid='+orgid+'&renId='+id, '_self', '');
					                                }
					                        },
					                        {
					                                text : "Close the app",
					                                click : function() {							                                        
					                                        $(this).dialog("close");
					                                        setTimeout (window.close, 5000);
					                                }
					                        }]
							        });
							    }
							}
						});
					} catch(err) {
						console.log('err::'+err);
					}
				}
			
				function LDT_loadComponent(type, accessToken, subjectId) {
					//console.log("Access token within Load Comp :"+accessToken);
					var id = getUrlVars()["renId"];
					var successflag = getUrlVars()["successflag"];
					document.getElementById("renderLtngComp").innerHTML = "";
					$Lightning.createComponent("<%= namespace %>REN_LT_MainComponent", {type: type, subjectId: subjectId, renId:id, oauthId: accessToken}, "renderLtngComp");
				}
				
				return {
					LDLTCMPCreate : LDLTCMPCreate,
					onWinLoad : onWinLoad
				};
			}());
			window.onload =function(){
				SS.LightningActions.onWinLoad();
			}
			
			SS.LightningActions.LDLTCMPCreate();
		</script>
	</body>
</html>